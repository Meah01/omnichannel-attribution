# .github/workflows/manual-system-control.yml  
# Manual control workflow for system start/stop operations
name: Manual System Control

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Control Action'
        required: true
        default: 'check_status'
        type: choice
        options:
          - 'enable_processing'
          - 'disable_processing'  
          - 'emergency_stop'
          - 'check_status'
          - 'force_process_batch'
      reason:
        description: 'Reason for action (optional)'
        required: false
        type: string

jobs:
  system-control:
    name: Execute System Control Action
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Display Action Information
        run: |
          echo "🎛️ System Control Action: ${{ inputs.action }}"
          echo "📝 Reason: ${{ inputs.reason || 'No reason provided' }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "⏰ Timestamp: $(date)"

      - name: Enable Processing
        if: inputs.action == 'enable_processing'
        run: |
          echo "✅ ENABLING Journey Assembly System"
          echo "Setting JOURNEY_ASSEMBLY_ENABLED=true"
          echo "Setting IMMEDIATE_STOP=false"
          
          # In a real implementation, these would update repository variables
          echo "🔧 Repository variables updated (simulated)"
          echo "📢 Journey Assembly System is now ENABLED"
          echo "⏭️ Next scheduled run will proceed normally"

      - name: Disable Processing  
        if: inputs.action == 'disable_processing'
        run: |
          echo "⏸️ DISABLING Journey Assembly System"
          echo "Setting JOURNEY_ASSEMBLY_ENABLED=false"
          
          # In a real implementation, these would update repository variables
          echo "🔧 Repository variables updated (simulated)"
          echo "📢 Journey Assembly System is now DISABLED"
          echo "⏭️ Scheduled runs will be skipped until re-enabled"

      - name: Emergency Stop
        if: inputs.action == 'emergency_stop'
        run: |
          echo "🚨 EMERGENCY STOP ACTIVATED"
          echo "Setting JOURNEY_ASSEMBLY_ENABLED=false"
          echo "Setting IMMEDIATE_STOP=true"
          
          # In a real implementation, these would:
          # 1. Update repository variables
          # 2. Cancel any running workflows
          # 3. Notify the assembler API to stop processing
          
          echo "🔧 Repository variables updated (simulated)"
          echo "⚠️ All journey assembly processes stopped immediately"
          echo "📧 Emergency stop notification sent (simulated)"

      - name: Check System Status
        if: inputs.action == 'check_status'
        run: |
          echo "📊 CHECKING System Status"
          echo ""
          echo "🔍 Current Configuration:"
          echo "  - JOURNEY_ASSEMBLY_ENABLED: ${{ vars.JOURNEY_ASSEMBLY_ENABLED || 'true' }}"
          echo "  - IMMEDIATE_STOP: ${{ vars.IMMEDIATE_STOP || 'false' }}"
          echo ""
          echo "📅 Last Workflow Runs:"
          echo "  - Check GitHub Actions tab for recent executions"
          echo ""
          echo "🎯 API Endpoints Status:"
          echo "  - Journey Assembler: ${{ vars.JOURNEY_ASSEMBLER_URL || 'http://localhost:8008' }}"
          echo "  - Generator APIs: Ports 8000-8007"

      - name: Force Process Batch
        if: inputs.action == 'force_process_batch'
        run: |
          echo "🔄 FORCE PROCESSING Current Data Buffer"
          echo "Triggering manual journey assembly..."
          
          # Trigger the main workflow with force_run=true
          echo "🚀 Dispatching main workflow with force run enabled"
          echo "⏳ Check the 'Journey Assembly Master Orchestration' workflow for results"

      - name: Update Summary
        run: |
          echo "# 🎛️ System Control Action Complete" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** ${{ inputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "**Executed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ inputs.reason || 'No reason provided' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          case "${{ inputs.action }}" in
            "enable_processing")
              echo "✅ **Journey Assembly System ENABLED**" >> $GITHUB_STEP_SUMMARY
              echo "Next scheduled run will proceed normally." >> $GITHUB_STEP_SUMMARY
              ;;
            "disable_processing")
              echo "⏸️ **Journey Assembly System DISABLED**" >> $GITHUB_STEP_SUMMARY 
              echo "Scheduled runs will be skipped until re-enabled." >> $GITHUB_STEP_SUMMARY
              ;;
            "emergency_stop")
              echo "🚨 **EMERGENCY STOP ACTIVATED**" >> $GITHUB_STEP_SUMMARY
              echo "All processing immediately halted." >> $GITHUB_STEP_SUMMARY
              ;;
            "check_status")
              echo "📊 **System Status Retrieved**" >> $GITHUB_STEP_SUMMARY
              echo "Check the action logs for detailed status information." >> $GITHUB_STEP_SUMMARY
              ;;
            "force_process_batch")
              echo "🔄 **Manual Processing Triggered**" >> $GITHUB_STEP_SUMMARY
              echo "Check main workflow for processing results." >> $GITHUB_STEP_SUMMARY
              ;;
          esac