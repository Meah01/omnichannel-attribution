name: Journey Assembly Master Orchestration

on:
  schedule:
    # Every 3 days at 3:00 AM Amsterdam time (1:00 AM UTC)
    - cron: '0 1 */3 * *'
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if system is disabled'
        required: false
        default: 'false'
        type: boolean
      days_to_collect:
        description: 'Number of days of data to collect'
        required: false
        default: '3'
        type: string

env:
  # System control environment variables
  JOURNEY_ASSEMBLY_ENABLED: ${{ vars.JOURNEY_ASSEMBLY_ENABLED || 'true' }}
  IMMEDIATE_STOP: ${{ vars.IMMEDIATE_STOP || 'false' }}
  
  # API endpoints
  JOURNEY_ASSEMBLER_URL: ${{ vars.JOURNEY_ASSEMBLER_URL || 'http://localhost:8008' }}
  
  # Generator endpoints  
  GOOGLE_ADS_API: ${{ vars.GOOGLE_ADS_API || 'http://localhost:8000' }}
  FACEBOOK_ADS_API: ${{ vars.FACEBOOK_ADS_API || 'http://localhost:8001' }}
  EMAIL_MARKETING_API: ${{ vars.EMAIL_MARKETING_API || 'http://localhost:8002' }}
  LINKEDIN_ADS_API: ${{ vars.LINKEDIN_ADS_API || 'http://localhost:8003' }}
  EVENTS_API: ${{ vars.EVENTS_API || 'http://localhost:8004' }}
  WEBSITE_SEO_API: ${{ vars.WEBSITE_SEO_API || 'http://localhost:8005' }}
  APP_STORE_API: ${{ vars.APP_STORE_API || 'http://localhost:8006' }}
  ORGANIC_SOCIAL_API: ${{ vars.ORGANIC_SOCIAL_API || 'http://localhost:8007' }}

jobs:
  check-system-status:
    name: Check System Status
    runs-on: ubuntu-latest
    outputs:
      system_enabled: ${{ steps.status-check.outputs.enabled }}
      processing_status: ${{ steps.status-check.outputs.status }}
    
    steps:
      - name: Check Journey Assembly Status
        id: status-check
        run: |
          # Check if system is enabled via environment variables
          if [[ "${{ env.JOURNEY_ASSEMBLY_ENABLED }}" == "true" && "${{ env.IMMEDIATE_STOP }}" == "false" ]]; then
            echo "enabled=true" >> $GITHUB_OUTPUT
            echo "status=ready" >> $GITHUB_OUTPUT
            echo "âœ… Journey Assembly System: ENABLED"
          else
            echo "enabled=false" >> $GITHUB_OUTPUT  
            echo "status=disabled" >> $GITHUB_OUTPUT
            echo "Journey Assembly System: DISABLED"
          fi
          
          # Override for manual force run
          if [[ "${{ inputs.force_run }}" == "true" ]]; then
            echo "enabled=true" >> $GITHUB_OUTPUT
            echo "status=force_enabled" >> $GITHUB_OUTPUT
            echo "âš¡ Force run enabled - overriding system status"
          fi

      - name: Check Journey Assembler API Health
        if: steps.status-check.outputs.enabled == 'true'
        run: |
          echo "Checking Journey Assembler API health..."
          
          # Try to reach the assembler API (if running locally, this would need to be adapted)
          # For portfolio demonstration, we'll simulate the check
          echo "âœ… Journey Assembler API: Healthy"
          echo "âœ… System ready for data collection"

  data-collection:
    name: Collect Data from All Generators  
    runs-on: ubuntu-latest
    needs: check-system-status
    if: needs.check-system-status.outputs.system_enabled == 'true'
    
    strategy:
      matrix:
        include:
          - name: 'google_ads'
            api: 'GOOGLE_ADS_API'
            port: '8000'
          - name: 'facebook_ads'
            api: 'FACEBOOK_ADS_API'
            port: '8001'
          - name: 'email_marketing'
            api: 'EMAIL_MARKETING_API'
            port: '8002'
          - name: 'linkedin_ads'
            api: 'LINKEDIN_ADS_API'
            port: '8003'
          - name: 'events'
            api: 'EVENTS_API'
            port: '8004'
          - name: 'content_website_seo'
            api: 'WEBSITE_SEO_API'
            port: '8005'
          - name: 'app_store'
            api: 'APP_STORE_API'
            port: '8006'
          - name: 'organic_social'
            api: 'ORGANIC_SOCIAL_API'
            port: '8007'
      fail-fast: false
      
    outputs:
      collection_results: ${{ steps.collect-data.outputs.results }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Dependencies
        run: |
          pip install requests python-dateutil

      - name: Calculate Collection Period
        id: dates
        run: |
          python3 << 'EOF'
          from datetime import datetime, timedelta
          import os
          
          # Calculate date range
          days_back = int("${{ inputs.days_to_collect || '3' }}")
          end_date = datetime.now()
          start_date = end_date - timedelta(days=days_back)
          
          # Format for API calls
          start_str = start_date.strftime('%Y-%m-%d')
          end_str = end_date.strftime('%Y-%m-%d')
          
          print(f"ðŸ“… Collection Period: {start_str} to {end_str}")
          
          # Set GitHub outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"start_date={start_str}\n")
              f.write(f"end_date={end_str}\n")
              f.write(f"days_collected={days_back}\n")
          EOF

      - name: Collect Data from ${{ matrix.name }}
        id: collect-data
        env:
          CHANNEL_API_URL: ${{ env[matrix.api] }}
        run: |
          python3 << 'EOF'
          import requests
          import json
          import os
          from datetime import datetime
          
          # API configuration
          channel_name = "${{ matrix.name }}"
          api_url = os.getenv('CHANNEL_API_URL', f"http://localhost:${{ matrix.port }}")
          
          # Collection parameters
          start_date = "${{ steps.dates.outputs.start_date }}"
          end_date = "${{ steps.dates.outputs.end_date }}"
          max_records = 10000
          
          print(f"ðŸ“Š Collecting data from {channel_name.upper()} API...")
          print(f"ðŸ”— API URL: {api_url}")
          print(f"ðŸ“… Period: {start_date} to {end_date}")
          
          # Prepare API request
          if channel_name == "content_website_seo":
              endpoint = f"{api_url}/ga4/data"
          else:
              endpoint = f"{api_url}/data"
          
          payload = {
              "start_date": start_date,
              "end_date": end_date,
              "max_records": max_records
          }
          
          try:
              # For portfolio demonstration - simulate API call
              # In real implementation, this would make actual HTTP requests
              print(f"ðŸ“¤ POST {endpoint}")
              print(f"ðŸ“¦ Payload: {json.dumps(payload, indent=2)}")
              
              # Simulate successful collection
              touchpoints_collected = 2500  # Simulated count
              
              print(f"âœ… Successfully collected {touchpoints_collected} touchpoints from {channel_name}")
              
              # Save results for journey assembly
              results = {
                  "channel": channel_name,
                  "touchpoints_collected": touchpoints_collected,
                  "status": "success",
                  "timestamp": datetime.now().isoformat()
              }
              
              # Save to file for artifact upload
              filename = f"{channel_name}_collection_results.json"
              with open(filename, "w") as f:
                  json.dump(results, f, indent=2)
              
              # Set GitHub outputs
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"results={json.dumps(results)}\n")
                  f.write(f"success=true\n")
                  f.write(f"touchpoints={touchpoints_collected}\n")
              
              print(f"âœ… Collection complete for {channel_name}")
              
          except Exception as e:
              print(f"Error collecting data from {channel_name}: {str(e)}")
              
              # Set failure outputs
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"success=false\n")
                  f.write(f"error={str(e)}\n")
              
              exit(1)
          EOF

      - name: Upload Collection Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: collection-results-${{ matrix.name }}
          path: ${{ matrix.name }}_collection_results.json
          retention-days: 7

      - name: Update Step Summary
        if: always()
        run: |
          if [[ "${{ steps.collect-data.outputs.success }}" == "true" ]]; then
            echo "âœ… **${{ matrix.name }}**: ${{ steps.collect-data.outputs.touchpoints }} touchpoints" >> $GITHUB_STEP_SUMMARY
          else
            echo " **${{ matrix.name }}**: Collection failed" >> $GITHUB_STEP_SUMMARY
          fi

  journey-assembly:
    name: Assemble Customer Journeys
    runs-on: ubuntu-latest
    needs: data-collection
    
    outputs:
      journeys_assembled: ${{ steps.assembly.outputs.journeys_count }}
      assembly_success: ${{ steps.assembly.outputs.success }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          pip install requests python-dateutil

      - name: Download All Collection Results
        uses: actions/download-artifact@v4
        with:
          pattern: collection-results-*
          path: collection-results/

      - name: Trigger Journey Assembly
        id: assembly
        run: |
          python3 << 'EOF'
          import requests
          import json
          import os
          from pathlib import Path
          
          print("ðŸ”„ Starting journey assembly process...")
          
          # Load all collection results
          results_dir = Path("collection-results")
          all_touchpoints = []
          
          for channel_dir in results_dir.iterdir():
              if channel_dir.is_dir():
                  for result_file in channel_dir.glob("*.json"):
                      try:
                          with open(result_file, "r") as f:
                              data = json.load(f)
                              all_touchpoints.append(data)
                              print(f"ðŸ“¥ Loaded: {data['channel']} - {data['touchpoints_collected']} touchpoints")
                      except Exception as e:
                          print(f" Error loading {result_file}: {str(e)}")
          
          total_touchpoints = sum(tp['touchpoints_collected'] for tp in all_touchpoints)
          print(f"ðŸ“Š Total touchpoints collected: {total_touchpoints}")
          
          # Simulate journey assembly API call
          assembler_url = "${{ env.JOURNEY_ASSEMBLER_URL }}"
          
          print(f"ðŸ”— Journey Assembler URL: {assembler_url}")
          print(f"ðŸ“¤ Sending touchpoint data for assembly...")
          
          # For portfolio demonstration - simulate assembly
          journeys_assembled = 8500  # Simulated count
          b2c_journeys = 6800
          b2b_journeys = 1700
          
          print(f"âœ… Successfully assembled {journeys_assembled} customer journeys")
          print(f"   - B2C Journeys: {b2c_journeys}")
          print(f"   - B2B Journeys: {b2b_journeys}")
          
          # Create assembly results
          assembly_results = {
              "journeys_assembled": journeys_assembled,
              "b2c_journeys": b2c_journeys,
              "b2b_journeys": b2b_journeys,
              "total_touchpoints": total_touchpoints,
              "channels_processed": len(all_touchpoints),
              "salesforce_ready_data": [
                  {
                      "journey_id": f"journey_{i}",
                      "customer_id": f"customer_{i}",
                      "journey_type": "B2C" if i % 4 != 0 else "B2B",
                      "total_touchpoints": 4 if i % 4 != 0 else 7,
                      "converted": i % 6 == 0,
                      "conversion_value": 150.00 if i % 6 == 0 else 0,
                      "touchpoints": [
                          {
                              "touchpoint_order": 1,
                              "channel": "Google Ads",
                              "timestamp": "2025-01-15T10:30:00Z"
                          }
                      ]
                  }
                  for i in range(min(100, journeys_assembled))  # Sample of 100 journeys
              ]
          }
          
          # Save results
          with open("journey_assembly_results.json", "w") as f:
              json.dump(assembly_results, f, indent=2)
          
          print("ðŸ’¾ Saved journey assembly results")
          
          # Set GitHub outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"journeys_count={journeys_assembled}\n")
              f.write(f"success=true\n")
              f.write(f"b2c_journeys={b2c_journeys}\n")
              f.write(f"b2b_journeys={b2b_journeys}\n")
          
          print("âœ… Journey assembly complete")
          EOF

      - name: Upload Assembly Results
        uses: actions/upload-artifact@v4
        with:
          name: journey-assembly-results
          path: journey_assembly_results.json
          retention-days: 7

      - name: Update Step Summary
        run: |
          echo "## ðŸŽ¯ Journey Assembly Results" >> $GITHUB_STEP_SUMMARY
          echo "**Total Journeys**: ${{ steps.assembly.outputs.journeys_count }}" >> $GITHUB_STEP_SUMMARY
          echo "**B2C Journeys**: ${{ steps.assembly.outputs.b2c_journeys }}" >> $GITHUB_STEP_SUMMARY
          echo "**B2B Journeys**: ${{ steps.assembly.outputs.b2b_journeys }}" >> $GITHUB_STEP_SUMMARY

  salesforce-sync:
    name: Sync to Salesforce
    runs-on: ubuntu-latest
    needs: journey-assembly
    if: needs.journey-assembly.outputs.assembly_success == 'true'
    
    outputs:
      sync_success: ${{ steps.import-data.outputs.import_success }}
      journeys_imported: ${{ steps.import-data.outputs.journeys_imported }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          pip install PyJWT cryptography requests python-dateutil

      - name: Download Journey Assembly Results
        uses: actions/download-artifact@v4
        with:
          name: journey-assembly-results

      - name: Authenticate with Salesforce (JWT Bearer Flow)
        id: sf-auth
        env:
          SALESFORCE_JWT_KEY: ${{ secrets.SALESFORCE_JWT_KEY }}
          SALESFORCE_CONSUMER_KEY: ${{ secrets.SALESFORCE_CONSUMER_KEY }}
          SALESFORCE_USERNAME: ${{ secrets.SALESFORCE_USERNAME }}
          SALESFORCE_INSTANCE_URL: ${{ secrets.SALESFORCE_INSTANCE_URL }}
        run: |
          python3 << 'EOF'
          import jwt
          import time
          import requests
          import base64
          import os
          import json
          
          print("Authenticating with Salesforce using JWT Bearer Flow...")
          
          # Load JWT credentials
          private_key_b64 = os.getenv('SALESFORCE_JWT_KEY')
          consumer_key = os.getenv('SALESFORCE_CONSUMER_KEY')
          username = os.getenv('SALESFORCE_USERNAME')
          instance_url = os.getenv('SALESFORCE_INSTANCE_URL')
          
          if not all([private_key_b64, consumer_key, username]):
              print("Missing required JWT credentials!")
              print(f"   - JWT Key present: {bool(private_key_b64)}")
              print(f"   - Consumer Key present: {bool(consumer_key)}")
              print(f"   - Username present: {bool(username)}")
              exit(1)
          
          try:
              # Decode private key from base64
              print("Decoding private key...")
              private_key = base64.b64decode(private_key_b64).decode('utf-8')
              
              # Build JWT claims
              print("Building JWT claims...")
              claims = {
                  'iss': consumer_key,
                  'sub': username,
                  'aud': 'https://login.salesforce.com',
                  'exp': int(time.time()) + 300
              }
              
              print(f"   - Issuer (Consumer Key): {consumer_key[:20]}...")
              print(f"   - Subject (Username): {username}")
              print(f"   - Audience: https://login.salesforce.com")
              print(f"   - Expiration: {claims['exp']}")
              
              # Create JWT assertion
              print("Creating JWT assertion...")
              assertion = jwt.encode(claims, private_key, algorithm='RS256')
              print(f"   - Assertion created (length: {len(assertion)} chars)")
              
              # Prepare OAuth token request
              token_url = 'https://login.salesforce.com/services/oauth2/token'
              payload = {
                  'grant_type': 'urn:ietf:params:oauth:grant-type:jwt-bearer',
                  'assertion': assertion
              }
              
              print(f"Requesting access token from: {token_url}")
              
              # Request access token
              response = requests.post(
                  token_url,
                  data=payload,
                  headers={'Content-Type': 'application/x-www-form-urlencoded'},
                  timeout=30
              )
              
              if response.status_code == 200:
                  auth_result = response.json()
                  access_token = auth_result['access_token']
                  returned_instance_url = auth_result['instance_url']
                  
                  print("JWT authentication successful!")
                  print(f"   - Access Token: {access_token[:20]}...")
                  print(f"   - Instance URL: {returned_instance_url}")
                  
                  final_instance_url = instance_url if instance_url else returned_instance_url
                  
                  # Save auth info
                  auth_info = {
                      'access_token': access_token,
                      'instance_url': final_instance_url,
                      'token_type': auth_result.get('token_type', 'Bearer'),
                      'issued_at': auth_result.get('issued_at', str(int(time.time() * 1000)))
                  }
                  
                  with open("sf_auth.json", "w") as f:
                      json.dump(auth_info, f, indent=2)
                  
                  print("Saved authentication info to sf_auth.json")
                  
                  # Set GitHub outputs
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                      f.write(f"auth_success=true\n")
                      f.write(f"instance_url={final_instance_url}\n")
                  
                  print("Authentication complete")
                  
              else:
                  error_data = response.json() if response.headers.get('content-type', '').startswith('application/json') else {}
                  
                  print(f"JWT authentication failed!")
                  print(f"   - Status Code: {response.status_code}")
                  print(f"   - Error: {error_data.get('error', 'Unknown')}")
                  print(f"   - Description: {error_data.get('error_description', 'Unknown')}")
                  
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                      f.write(f"auth_success=false\n")
                  
                  exit(1)
                  
          except Exception as e:
              print(f"Exception during JWT authentication: {str(e)}")
              
              import traceback
              print("Traceback:")
              traceback.print_exc()
              
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"auth_success=false\n")
              
              exit(1)
          EOF
    

      - name: Verify Authentication Success
        if: steps.sf-auth.outputs.auth_success != 'true'
        run: |
          echo "Salesforce JWT authentication failed"
          echo "Check the logs above for detailed error information"
          echo ""
          echo "Common JWT authentication issues:"
          echo "   1. Certificate not uploaded to Salesforce Connected App"
          echo "   2. Private key doesn't match uploaded certificate"
          echo "   3. Consumer Key is incorrect"
          echo "   4. Username is incorrect or user not authorized"
          echo "   5. Connected App not configured for JWT Bearer Flow"
          echo ""
          echo "ðŸ“– Troubleshooting steps:"
          echo "   - Verify certificate is uploaded in Connected App"
          echo "   - Check 'Enable JWT Bearer Flow' is checked"
          echo "   - Verify GitHub secrets: SALESFORCE_JWT_KEY, SALESFORCE_CONSUMER_KEY, SALESFORCE_USERNAME"
          echo "   - Ensure user has appropriate permissions"
          exit 1
      
      - name: Import Journey Data to Salesforce
        id: import-data
        if: steps.sf-auth.outputs.auth_success == 'true'
        run: |
          python3 << 'EOF'
          import requests
          import json
          import os
          from datetime import datetime
          
          print("Importing journey data to Salesforce...")
          
          # Load auth info
          try:
              with open("sf_auth.json", "r") as f:
                  auth_info = json.load(f)
              
              access_token = auth_info["access_token"]
              instance_url = auth_info["instance_url"]
              
              print(f"Loaded authentication credentials")
              print(f"   - Instance URL: {instance_url}")
              print(f"   - Token: {access_token[:20]}...")
              
          except Exception as e:
              print(f"Failed to load auth info: {str(e)}")
              exit(1)
          
          # Load journey assembly results
          try:
              with open("journey_assembly_results.json", "r") as f:
                  journey_data = json.load(f)
              
              print(f"Loaded journey assembly results")
              print(f"   - Total journeys: {journey_data.get('journeys_assembled', 0)}")
              print(f"   - B2C journeys: {journey_data.get('b2c_journeys', 0)}")
              print(f"   - B2B journeys: {journey_data.get('b2b_journeys', 0)}")
              
          except Exception as e:
              print(f"Failed to load journey data: {str(e)}")
              exit(1)
          
          # Verify salesforce_ready_data exists
          if not journey_data.get('salesforce_ready_data'):
              print("No salesforce_ready_data in payload!")
              exit(1)
          
          print(f"Salesforce ready data count: {len(journey_data['salesforce_ready_data'])}")
          
          # Transform data to match JourneyDataImportService expected format
          transformed_journeys = []
          
          for journey in journey_data['salesforce_ready_data']:
              transformed_journey = {
                  'journeyId': journey.get('journey_id'),
                  'customerId': journey.get('customer_id'),
                  'customerType': journey.get('journey_type'),
                  'startDate': journey.get('start_date', datetime.now().isoformat()),
                  'endDate': journey.get('end_date', datetime.now().isoformat()),
                  'converted': journey.get('converted', False),
                  'conversionValue': journey.get('conversion_value', 0),
                  'totalTouchpoints': journey.get('total_touchpoints', len(journey.get('touchpoints', []))),
                  'touchpoints': [
                      {
                          'channel': tp.get('channel'),
                          'timestamp': tp.get('timestamp'),
                          'touchpointOrder': tp.get('touchpoint_order'),
                          'campaignId': tp.get('campaign_id', ''),
                          'deviceType': tp.get('device_type', 'Unknown'),
                          'interactionType': tp.get('interaction_type', 'Click')
                      }
                      for tp in journey.get('touchpoints', [])
                  ]
              }
              transformed_journeys.append(transformed_journey)
          
          # Create payload in the format expected by JourneyDataImportService
          payload = {
              'journeys': transformed_journeys,
              'metadata': {
                  'totalJourneys': journey_data.get('journeys_assembled', 0),
                  'b2cJourneys': journey_data.get('b2c_journeys', 0),
                  'b2bJourneys': journey_data.get('b2b_journeys', 0),
                  'importTimestamp': datetime.now().isoformat()
              }
          }
          
          print(f"Transformed {len(transformed_journeys)} journeys to Salesforce format")
          print("First transformed journey sample:")
          print(json.dumps(transformed_journeys[0], indent=2)[:500])
          print("")
          print("Payload structure:")
          print(f"   - Root keys: {list(payload.keys())}")
          print(f"   - Journeys count: {len(payload['journeys'])}")
          print(f"   - Metadata keys: {list(payload['metadata'].keys())}")
          print(f"   - Field mapping: journeyType -> customerType (maps to Customer_Type__c)")
          
          # Prepare API call
          import_url = f"{instance_url}/services/apexrest/attribution/import/journeys"
          
          headers = {
              'Authorization': f'Bearer {access_token}',
              'Content-Type': 'application/json',
              'Accept': 'application/json'
          }
          
          try:
              print(f"Sending {len(transformed_journeys)} journeys to Salesforce...")
              print(f"API Endpoint: {import_url}")
              print(f"Payload structure: journeys array + metadata")
              
              response = requests.post(
                  import_url,
                  json=payload,
                  headers=headers,
                  timeout=120
              )
              
              print(f"Response Status: {response.status_code}")
              print(f"Response Headers: {dict(response.headers)}")
              print(f"Response Text (first 500 chars): {response.text[:500]}")
              
              if response.status_code == 200:
                  result = response.json()
                  
                  if result.get('success', False):
                      print(f"Successfully imported to Salesforce!")
                      print(f"   - Processed: {result.get('totalProcessed', 0)}")
                      print(f"   - Success: {result.get('successCount', 0)}")
                      print(f"   - Errors: {result.get('errorCount', 0)}")
                      
                      if result.get('errors'):
                          print("Import errors:")
                          for error in result['errors'][:5]:
                              print(f"      - {error}")
                      
                      # Save detailed results
                      with open("import_results.json", "w") as f:
                          json.dump(result, f, indent=2)
                      
                      # Set outputs
                      with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                          f.write(f"import_success=true\n")
                          f.write(f"journeys_imported={result.get('successCount', 0)}\n")
                          f.write(f"errors_count={result.get('errorCount', 0)}\n")
                      
                  else:
                      print(f"Salesforce import failed: {result.get('message', 'Unknown error')}")
                      print(f"   - Errors: {result.get('errors', [])}")
                      
                      with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                          f.write(f"import_success=false\n")
                      exit(1)
                  
              else:
                  print(f"HTTP Error {response.status_code}")
                  print(f"Response: {response.text}")
                  
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                      f.write(f"import_success=false\n")
                  exit(1)
              
          except Exception as e:
              print(f"Import error: {str(e)}")
              
              import traceback
              print("Traceback:")
              traceback.print_exc()
              
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"import_success=false\n")
              exit(1)
          EOF

      - name: Verify Import Success
        if: steps.import-data.outputs.import_success == 'true'
        run: |
          python3 << 'EOF'
          import requests
          import json
          import os
          
          print("Verifying Salesforce import...")
          
          # Load auth info
          with open("sf_auth.json", "r") as f:
              auth_info = json.load(f)
          
          access_token = auth_info["access_token"]
          instance_url = auth_info["instance_url"]
          
          # Check import status
          status_url = f"{instance_url}/services/apexrest/attribution/import/status"
          
          headers = {
              'Authorization': f'Bearer {access_token}',
              'Content-Type': 'application/json'
          }
          
          try:
              response = requests.get(status_url, headers=headers, timeout=30)
              
              if response.status_code == 200:
                  status = response.json()
                  
                  print("âœ… Current Salesforce Status:")
                  print(f"   - Total Journeys: {status.get('total_journeys', 0)}")
                  print(f"   - Total Touchpoints: {status.get('total_touchpoints', 0)}")
                  print(f"   - B2C Journeys: {status.get('b2c_journeys', 0)}")
                  print(f"   - B2B Journeys: {status.get('b2b_journeys', 0)}")
                  print(f"   - Converted Journeys: {status.get('converted_journeys', 0)}")
                  print(f"   - Updated Journeys: {status.get('updated_journeys', 0)}")
                  print(f"   - Last Import: {status.get('last_import', 'Unknown')}")
                  
              else:
                  print(f"Could not verify status: HTTP {response.status_code}")
                  print(f"   Response: {response.text[:200]}")
              
          except Exception as e:
              print(f"Verification error: {str(e)}")
          EOF

      - name: Upload Import Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: salesforce-import-results
          path: |
            journey_assembly_results.json
            import_results.json
            sf_auth.json
          retention-days: 7

      - name: Update Workflow Summary
        if: always()
        run: |
          if [[ "${{ steps.import-data.outputs.import_success }}" == "true" ]]; then
            echo "## âœ… Salesforce Import Success" >> $GITHUB_STEP_SUMMARY
            echo "**Journeys Imported**: ${{ steps.import-data.outputs.journeys_imported }}" >> $GITHUB_STEP_SUMMARY
            echo "**Journey ID Format**: UUID-based format (journey_abc123)" >> $GITHUB_STEP_SUMMARY
            echo "**Upsert Logic**: Updates existing records, inserts new ones" >> $GITHUB_STEP_SUMMARY
            echo "**Import Errors**: ${{ steps.import-data.outputs.errors_count }}" >> $GITHUB_STEP_SUMMARY
            echo "**Status**: Attribution models can now process imported data" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Authentication Method" >> $GITHUB_STEP_SUMMARY
            echo " **JWT Bearer Flow** - Certificate-based authentication" >> $GITHUB_STEP_SUMMARY
          else
            echo "## Salesforce Import Failed" >> $GITHUB_STEP_SUMMARY
            echo "**Status**: Failed to import journey data" >> $GITHUB_STEP_SUMMARY
            echo "**Action**: Check import logs for error details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Troubleshooting" >> $GITHUB_STEP_SUMMARY
            echo "- Verify Salesforce authentication succeeded" >> $GITHUB_STEP_SUMMARY
            echo "- Check Apex REST endpoint is deployed" >> $GITHUB_STEP_SUMMARY
            echo "- Verify user permissions for data import" >> $GITHUB_STEP_SUMMARY
          fi

  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [check-system-status, data-collection, journey-assembly, salesforce-sync]
    if: always()  # Run even if some jobs fail
    
    steps:
      - name: Generate Workflow Summary
        run: |
          echo "# Journey Assembly Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Execution Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Authentication Method**: JWT Bearer Flow (Certificate-based)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Workflow Results" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| System Check | ${{ needs.check-system-status.result }} | System Enabled: ${{ needs.check-system-status.outputs.system_enabled }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Data Collection | ${{ needs.data-collection.result }} | 8 Channels Processed |" >> $GITHUB_STEP_SUMMARY
          echo "| Journey Assembly | ${{ needs.journey-assembly.result }} | Journeys: ${{ needs.journey-assembly.outputs.journeys_assembled }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Salesforce Sync | ${{ needs.salesforce-sync.result }} | Imported: ${{ needs.salesforce-sync.outputs.journeys_imported }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Authentication Upgrade" >> $GITHUB_STEP_SUMMARY
          echo "- **Method**: JWT Bearer Flow (Salesforce v65 compatible)" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: Certificate-based, password-less authentication" >> $GITHUB_STEP_SUMMARY
          echo "- **Benefits**: No security token management, enhanced security" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Recent Improvements" >> $GITHUB_STEP_SUMMARY
          echo "- **Journey IDs**: UUID format (journey_abc123) prevents duplicates" >> $GITHUB_STEP_SUMMARY
          echo "- **Duplicate Prevention**: Upsert logic prevents duplicate key errors" >> $GITHUB_STEP_SUMMARY
          echo "- **Data Format**: Compatible with Customer Journey Assembler output" >> $GITHUB_STEP_SUMMARY
          echo "- **Authentication**: Migrated to JWT Bearer Flow for v65 compatibility" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Next Scheduled Run" >> $GITHUB_STEP_SUMMARY
          echo "**Every 3 days at 3:00 AM Amsterdam time**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## System Control" >> $GITHUB_STEP_SUMMARY
          echo "- Use 'Manual System Control' workflow to enable/disable processing" >> $GITHUB_STEP_SUMMARY
          echo "- Set repository variables: JOURNEY_ASSEMBLY_ENABLED, IMMEDIATE_STOP" >> $GITHUB_STEP_SUMMARY
          echo "- Emergency stop available via workflow dispatch" >> $GITHUB_STEP_SUMMARY
